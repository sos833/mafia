// ุงูููู: public/game-engine.js

/**
 * ูุฏูุฑ ูุงูู ุญุงูุฉ ูููุทู ูุนุจุฉ ุงููุงููุง ูู ูุถุน ุงูุฃูููุงูู.
 * ูุนูู ุจูุซุงุจุฉ "ุงูุฎุงุฏู" ุฃู "ุญูู ุงููุนุจุฉ" ุงูุฐู ูุชู ุชุดุบููู ูู ูุชุตูุญ ุงููุณุชุฎุฏู.
 */
class OfflineGameManager {
    /**
     * ูููู ุจุชููุฆุฉ ูุนุจุฉ ุฃูููุงูู ุฌุฏูุฏุฉ.
     * @param {string[]} playerNames - ูุตูููุฉ ุจุฃุณูุงุก ุฌููุน ุงููุงุนุจูู (ุงูุจุดุฑู + ุงูุจูุชุงุช).
     * @param {string} humanPlayerName - ุงุณู ุงููุงุนุจ ุงูุจุดุฑู.
     * @param {object} settings - ุฅุนุฏุงุฏุงุช ุงููุนุจุฉุ ูุจุดูู ุฃุณุงุณู ุชูููู ุงูุฃุฏูุงุฑ.
     */
    constructor(playerNames, humanPlayerName, settings) {
        this.gameState = {
            players: playerNames.map(name => ({
                name: name,
                isAlive: true,
                isHuman: name === humanPlayerName
            })),
            roles: {}, // ุณูููู ุจุฑุจุท ุฃุณูุงุก ุงููุงุนุจูู ุจูุงุฆูุงุช ุฃุฏูุงุฑูู
            phase: 'SETUP', // ุงููุฑุญูุฉ ุงูุญุงููุฉ ููุนุจุฉ: SETUP, NIGHT, DAY, VOTING
            dayCount: 1,
            settings: settings,
            gameOver: false,
            winner: null
        };
    }

    /**
     * ูููู ุจุชุนููู ุงูุฃุฏูุงุฑ ูุฌููุน ุงููุงุนุจูู ุจุดูู ุนุดูุงุฆู ุจูุงุกู ุนูู ุฅุนุฏุงุฏุงุช ุงููุนุจุฉ.
     * ูุฐู ุฅุญุฏู ุฃููู ุงูุฏูุงู ุงูุชู ูุชู ุงุณุชุฏุนุงุคูุง ุจุนุฏ ุฅูุดุงุก ุงููุนุจุฉ.
     */
    assignRoles() {
        let rolesToAssign = [];
        const roleSettings = this.gameState.settings.roles;

        // ุฅูุดุงุก ูุตูููุฉ ูู ุณูุงุณู ุงูุฃุฏูุงุฑ ุจูุงุกู ุนูู ุงูุฃุนุฏุงุฏ ุงููุญุฏุฏุฉ
        for (const role in roleSettings) {
            for (let i = 0; i < roleSettings[role]; i++) {
                rolesToAssign.push(role);
            }
        }
        
        // ุฎูุท ูุตูููุฉ ุงูุฃุฏูุงุฑ ูุถูุงู ุงูุนุดูุงุฆูุฉ
        rolesToAssign.sort(() => Math.random() - 0.5);

        // ุชุนููู ุฏูุฑ ููู ูุงุนุจ ูุชุฎุฒูู ุชูุงุตููู
        this.gameState.players.forEach((player, index) => {
            const roleName = rolesToAssign[index] || 'ููุงุทู'; // ุงูุงูุชุฑุงุถู ูู ููุงุทู ุฅุฐุง ููุฏุช ุงูุฃุฏูุงุฑ
            const descriptions = {
                'ุงููุงููุง': 'ุฃูุช ุงููุงุชู. ูู ุงููููุ ุงุฎุชุฑ ุถุญูุฉ ููุชููุง.',
                'ุงููุญูู': 'ุฃูุช ุงูุญูููุฉ. ูู ุงููููุ ุงุฎุชุฑ ุดุฎุตูุง ููุดู ูููุชู.',
                'ุงูุทุจูุจ': 'ุฃูุช ุงููููุฐ. ูู ุงููููุ ุงุฎุชุฑ ุดุฎุตูุง ูุญูุงูุชู ูู ุงููุงููุง.',
                'ููุงุทู': 'ุฃูุช ุจุฑูุก. ุงุณุชุฎุฏู ุฐูุงุกู ูู ุงูููุงุฑ ููุดู ุงููุงููุง.'
            };
            const icon = roleName === 'ุงููุงููุง' ? '๐ช' : roleName === 'ุงููุญูู' ? '๐ต๏ธโโ๏ธ' : roleName === 'ุงูุทุจูุจ' ? '๐จโโ๏ธ' : '๐ค';

            this.gameState.roles[player.name] = { 
                title: roleName, 
                icon: icon, 
                description: descriptions[roleName] 
            };
        });
        
        console.log("ุงูุฃุฏูุงุฑ ุชู ุชูุฒูุนูุง (ุฃูููุงูู):", this.gameState.roles);
    }

    /**
     * ูุนุงูุฌ ุงูุฅุฌุฑุงุกุงุช ุงูุชู ุญุฏุซุช ุฎูุงู ุงูููู ููุญุฏุฏ ุงููุชูุฌุฉ.
     * @param {object} actions - ูุงุฆู ูุญุชูู ุนูู ูุฑุงุฑุงุช ุงููุงุนุจูู (ูุซู mafiaTarget, doctorSave).
     * @returns {{victimName: string|null, investigationResult: {investigator: string, target: string, isMafia: boolean}|null}} - ูุงุฆู ูุญุชูู ุนูู ุงุณู ุงูุถุญูุฉ (ุฅู ูุฌุฏ) ููุชูุฌุฉ ุงูุชุญููู (ุฅู ูุฌุฏุช).
     */
    processNightResults(actions) {
        const { mafiaTarget, doctorSave, detectiveTarget } = actions;
        let investigationResult = null;

        // ุชุญุฏูุฏ ุงูุถุญูุฉ
        const victimName = (mafiaTarget && mafiaTarget !== doctorSave) ? mafiaTarget : null;

        if (victimName) {
            const victim = this.gameState.players.find(p => p.name === victimName);
            if (victim) {
                victim.isAlive = false;
            }
        }

        // ุชุญุฏูุฏ ูุชูุฌุฉ ุงูุชุญููู
        if (detectiveTarget) {
            const investigator = this.gameState.players.find(p => p.isAlive && this.gameState.roles[p.name].title === 'ุงููุญูู');
            const targetRole = this.gameState.roles[detectiveTarget].title;
            investigationResult = {
                investigator: investigator ? investigator.name : null,
                target: detectiveTarget,
                isMafia: targetRole === 'ุงููุงููุง'
            };
        }

        return { victimName, investigationResult };
    }

    /**
     * ูุนุงูุฌ ุงูุฃุตูุงุช ูู ูุฑุญูุฉ ุงูููุงุฑ ููุญุฏุฏ ูู ุชู ุฅูุตุงุคู.
     * @param {object} votes - ูุงุฆู ูุฑุจุท ูู ููุตูููุช ุจุงููุงุนุจ ุงูุฐู ุชู ุงูุชุตููุช ุถุฏู.
     * @returns {{eliminatedPlayer: string|null, tied: boolean}} - ุงููุงุนุจ ุงูุฐู ุชู ุฅูุตุงุคู ุฃู ูุนูููุงุช ุนู ุงูุชุนุงุฏู.
     */
    processVotingResults(votes) {
        const voteCounts = {};
        Object.values(votes).forEach(votedFor => {
            if (votedFor) { // ุชุฌุงูู ุงูุฃุตูุงุช ุงููุงุฑุบุฉ
                voteCounts[votedFor] = (voteCounts[votedFor] || 0) + 1;
            }
        });

        let maxVotes = 0;
        let playerToEliminate = null;
        let tie = false;

        for (const playerName in voteCounts) {
            if (voteCounts[playerName] > maxVotes) {
                maxVotes = voteCounts[playerName];
                playerToEliminate = playerName;
                tie = false;
            } else if (voteCounts[playerName] === maxVotes && maxVotes > 0) {
                tie = true;
            }
        }

        if (tie) {
            playerToEliminate = null; // ูุง ูุชู ุฅูุตุงุก ุฃุญุฏ ูู ุญุงูุฉ ุงูุชุนุงุฏู
        }
        
        if (playerToEliminate) {
            const eliminated = this.gameState.players.find(p => p.name === playerToEliminate);
            if (eliminated) {
                eliminated.isAlive = false;
            }
        }

        return { eliminatedPlayer: playerToEliminate, tied: tie };
    }

    /**
     * ูุชุญูู ููุง ุฅุฐุง ูุงู ูุฏ ุชู ุงููุตูู ุฅูู ุดุฑุท ุงูููุฒ ูุฃุญุฏ ุงููุฑูููู.
     * @returns {boolean} - ุฅุฑุฌุงุน `true` ุฅุฐุง ุงูุชูุช ุงููุนุจุฉุ ู `false` ุจุฎูุงู ุฐูู.
     */
    checkWinCondition() {
        const alivePlayers = this.gameState.players.filter(p => p.isAlive);
        const aliveMafia = alivePlayers.filter(p => this.gameState.roles[p.name].title === 'ุงููุงููุง');
        const aliveCitizens = alivePlayers.length - aliveMafia.length;

        if (aliveMafia.length === 0) {
            this.gameState.gameOver = true;
            this.gameState.winner = 'ุงูููุงุทููู';
            return true;
        }

        if (aliveMafia.length >= aliveCitizens) {
            this.gameState.gameOver = true;
            this.gameState.winner = 'ุงููุงููุง';
            return true;
        }

        return false;
    }
}